# Имя вашего workflow, которое будет отображаться в интерфейсе GitHub Actions
name: API tests

# Указываем, когда будет запускаться данный workflow
on:
  push:
    branches:
      - main # Запускать workflow, когда будет сделан коммит в ветку main
  pull_request:
    branches:
      - main # Запускать workflow, когда будет сделан pull request в ветку main

# Определяем все шаги, которые должны быть выполнены в рамках работы с тестами
jobs:
  run-tests:
    runs-on: ubuntu-latest # Указываем, что тесты будут запускаться на последней версии Ubuntu

    steps:
      # 1. Шаг, который будет клонировать ваш репозиторий на машину GitHub Actions
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Шаг для установки Python на виртуальной машине
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Шаг для клонирования репозитория с тестовым сервером в рабочую среду
      - name: Clone test server repository
        run: git clone https://github.com/Nikita-Filonov/qa-automation-engineer-api-course.git

      # 4. Шаг для установки зависимостей для тестового сервера
      - name: Install test server dependencies
        run: pip install -r qa-automation-engineer-api-course/requirements.txt

      # 5. Шаг для запуска тестового сервера с необходимыми переменными окружения
      - name: Start a test server
        env:
          APP_HOST: "http://localhost:8000"
          DATABASE_URL: "sqlite+aiosqlite:///./local.db" # Устанавливаем URL локальной базы данных
          JWT_ALGORITHM: "HS256"
          JWT_SECRET_KEY: "qa-automation-engineer-api-course-secret-key"
          JWT_ACCESS_TOKEN_EXPIRE: 1800
          JWT_REFRESH_TOKEN_EXPIRE: 5184000
        run: uvicorn main:app --host 0.0.0.0 --port 8000 --app-dir ./qa-automation-engineer-api-course &

      # 6. Шаг для установки всех зависимостей проекта
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 7. Шаг для запуска тестов с использованием pytest и генерации отчётов Allure
      - name: Run API tests
        run: |
          pytest -m regression --alluredir=allure-results --numprocesses=2

      # 8. Шаг для получения истории отчётов Allure, если она существует
      - name: Get Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      # 9. Шаг для генерации и отображения отчёта Allure
      - name: Generates Allure Report with history
        uses: simple-elf/allure-report-action@master
        if: always()
        with:
          allure_results: allure-results
          allure_history: allure-history

      # 10. Шаг для деплоя отчёта Allure на GitHub Pages, чтобы его можно было просматривать в браузере
      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history